# Debug Utilities Addon

substitutions:
  log_level: "DEBUG"

globals:
  - id: search_mode
    type: int
    restore_value: no
    initial_value: "0"

  - id: as_list
    type: std::vector<int>
    initial_value: ''

  - id: is0_list
    type: std::vector<int>
    initial_value: ''

  - id: is1_list
    type: std::vector<int>
    initial_value: ''

debug:
  update_interval: 5s

text_sensor:
  - platform: debug
    reset_reason:
      name: "Reset Reason"
      id: debug_restart_reason
      entity_category: DIAGNOSTIC
      web_server:
        sorting_group_id: sorting_group_diagnostic

binary_sensor:
  - platform: template
    id: debug_bus_connected
    name: "Bus Connection Status"
    icon: "mdi:connection"
    disabled_by_default: true
    lambda: |-
      if (id(debug_bus_voltage).state >= 3) {
        return true;
      } else {
        return false;
      }
    entity_category: DIAGNOSTIC
    web_server:
      sorting_group_id: sorting_group_diagnostic

sensor:
  - platform: adc
    id: debug_bus_voltage
    name: "Bus Voltage"
    pin: ${adc_input_pin}
    update_interval: 1s
    attenuation: 12dB
    entity_category: DIAGNOSTIC
    disabled_by_default: true
    icon: "mdi:current-dc"
    web_server:
      sorting_group_id: sorting_group_diagnostic
      sorting_weight: -5

  - platform: wifi_signal
    id: debug_wifi_signal_db
    update_interval: 60s
    internal: True

  - platform: copy
    id: debug_wifi_signal
    icon: "mdi:wifi"
    source_id: debug_wifi_signal_db
    name: "WiFi Signal"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: DIAGNOSTIC
    device_class: ""
    web_server:
      sorting_group_id: sorting_group_diagnostic

  - platform: debug
    free:
      id: debug_heap_free
      name: "Heap Free"
      entity_category: DIAGNOSTIC
      web_server:
        sorting_group_id: sorting_group_diagnostic
    block:
      id: debug_heap_max_block
      name: "Heap Max Block"
      entity_category: DIAGNOSTIC
      web_server:
        sorting_group_id: sorting_group_diagnostic
    loop_time:
      id: debug_loop_time
      name: "Loop Time"
      entity_category: DIAGNOSTIC
      web_server:
        sorting_group_id: sorting_group_diagnostic

text:
  - platform: template
    id: debug_send_command
    name: "Send Command"
    icon: "mdi:send"
    mode: text
    disabled_by_default: true
    optimistic: true
    set_action: 
      then: 
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(tc_bus_intercom)->send_command(number);
    web_server:
      sorting_group_id: sorting_group_system

button:
  - platform: template
    id: debug_restart_control_unit
    name: "System Restart"
    icon: mdi:restart
    disabled_by_default: true
    on_press:
      - tc_bus.send:
          command: 0x5100
    web_server:
      sorting_group_id: sorting_group_system

  - platform: template
    id: debug_system_discovery
    name: "System Discovery"
    icon: "mdi:home-search"
    disabled_by_default: true
    on_press: 
      # Clear Lists
      - lambda: |-
          id(as_list).clear();
          id(is0_list).clear();
          id(is1_list).clear();
      - light.turn_on:
          id: doorman_rgb_status_led
          red: 0%
          green: 100%
          blue: 10%
          effect: pulse
      # Search Outdoor Stations
      - logger.log: Search outdoor stations...
      - tc_bus.send:
          command: 0x5802
      - globals.set:
          id: search_mode
          value: "1"
      - delay: 350ms
      - tc_bus.send:
          command: 0x5200
      # Wait until every outdoor station sent response
      - delay: 5s
      # Search Indoor Stations 0
      - logger.log: Search indoor stations (0)...
      - globals.set:
          id: search_mode
          value: "2"
      - tc_bus.send:
          command: 0x5800
      - delay: 350ms
      - tc_bus.send:
          command: 0x5200
      # Wait until every indoor station sent response
      - delay: 10s
      # Search Indoor Stations 1
      - logger.log: Search indoor stations (1)...
      - globals.set:
          id: search_mode
          value: "3"
      - tc_bus.send:
          command: 0x5801
      - delay: 350ms
      - tc_bus.send:
          command: 0x5200
      # Wait until every indoor station sent response
      - delay: 10s
      # Complete
      - globals.set:
          id: search_mode
          value: "0"
      - logger.log:
          format: "Search complete! Found %i outdoor station(s), %i 0-indoor station(s) and %i 1-indoor station(s)."
          args: [ 'id(as_list).size()', 'id(is0_list).size()', 'id(is1_list).size()']
          level: info
      - lambda: |-
          for (const auto& value : id(as_list))
          {
            ESP_LOGI("DEBUG", "AS: %d", value);
          }

          for (const auto& value : id(is0_list))
          {
            ESP_LOGI("DEBUG", "IS0: %d", value);
          }

          for (const auto& value : id(is1_list))
          {
            ESP_LOGI("DEBUG", "IS1: %d", value);
          }
      - light.turn_on:
          id: doorman_rgb_status_led
          red: 0%
          green: 100%
          blue: 10%
          effect: none
      - delay: 3s
      - script.execute: update_led
    web_server:
      sorting_group_id: sorting_group_system

# Extend TC:BUS Component
tc_bus:
  on_command:
    - if:
        condition:
          - lambda: |-
              return x.type == COMMAND_TYPE_FOUND_DEVICE && id(search_mode) != 0;
        then:
          - lambda: |-
              std::vector<int>& list = (id(search_mode) == 1 ? id(as_list) : (id(search_mode) == 2 ? id(is0_list) : id(is1_list)));           
              bool found = false;
              for (const auto& s : list) {
                if (s == x.serial_number) {
                  found = true;
                  break;
                }
              }
              if (!found) {
                list.push_back(x.serial_number);
              }