# Configurable Options
substitutions:
  name: "doorman-s3"
  friendly_name: "Doorman S3"
  log_level: "ERROR"

  # Hardware Configuration
  led_pin: "GPIO1"
  rgb_led_pin: "GPIO2"
  relay_pin: "GPIO42"
  external_button_pin: "GPIO41"

globals:
  - id: first_door_opener_command
    type: int
    restore_value: true
    initial_value: '0x1100'

  - id: second_door_opener_command
    type: int
    restore_value: true
    initial_value: '0x1100'

  - id: apartment_doorbell_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

  - id: entrance_doorbell_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

  - id: pick_up_phone_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

  - id: hang_up_phone_command
    type: int
    restore_value: true
    initial_value: '0x3000'

  - id: ring_to_open_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

# Board Setup
esp32:
  board: esp32-s3-devkitc-1
  flash_size: 8MB

# Essential ESPHome Configuration Options
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  
  min_version: "2024.7.0"

  project:
    name: "AzonInc.Doorman-Stock"
    version: "2024.8.1"

  on_boot:
    then:
      - light.turn_on:
          id: doorman_rgb_status_led
          effect: pulse
          red: 100%
          green: 65%
          blue: 0%
      - wait_until:
          condition:
            wifi.connected:
      - light.turn_on:
          id: doorman_rgb_status_led
          effect: slow_pulse
          red: 9%
          green: 74%
          blue: 95%
      - wait_until:
          condition:
            api.connected:
      - light.turn_on:
          id: doorman_rgb_status_led
          effect: none
          red: 9%
          green: 74%
          blue: 95%
          color_brightness: 60%
      - delay: 3s
      - script.execute: reset_led

# Enable logging
logger:
  level: ${log_level}

api:
  reboot_timeout: 0s
  services:
    - service: send_tcs_command
      variables:
        command: int
      then:
        - tcs_intercom.send:
            command: !lambda 'return command;'

ota:
  - platform: esphome
  - platform: http_request
    id: ota_http_request

http_request:
  verify_ssl: false

wifi:
  ap:
    ssid: "Doorman-S3 Setup"
    password: "open-sesame"

captive_portal:

# Improv for easy provisioning
improv_serial:

# Import TCS Intercom Component
external_components:
  - source: github://AzonInc/esphome_tcs_intercom@master
    components: [ tcs_intercom ]

# Setup TCS Intercom Component
tcs_intercom:
  event: "doorman"
  bus_command:
    name: "Last Bus Command"
  hardware_version:
    name: "Doorman Hardware"
    disabled_by_default: true

switch:
  # Preconfigured Party Mode Switch
  - platform: template
    name: Ring To Open
    icon: mdi:party-popper
    id: doorman_ring_to_open
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      - light.turn_on:
          id: doorman_rgb_status_led
          red: 100%
          green: 100%
          blue: 3%
          effect: slow_partymode
    turn_off_action:
      - light.turn_off: doorman_rgb_status_led

  # Preconfigured Relay Switch
  - platform: gpio
    name: Relay
    icon: mdi:electric-switch
    id: doorman_relay
    restore_mode: RESTORE_DEFAULT_OFF
    disabled_by_default: true
    pin: ${relay_pin}

button:
  # System Actions
  - platform: restart
    entity_category: CONFIG
    name: Restart
    icon: mdi:restart
    disabled_by_default: true

  - platform: safe_mode
    name: Safe mode
    entity_category: CONFIG
    disabled_by_default: true

  # Preconfigured Open Door Button
  - platform: template
    name: "Open Entrance Door"
    icon: mdi:door
    on_press:
      - tcs_intercom.send:
          command: !lambda "return id(first_door_opener_command);"

  - platform: template
    name: "Open Second Door"
    icon: mdi:door
    on_press:
      - tcs_intercom.send:
          command: !lambda "return id(second_door_opener_command);"
    disabled_by_default: true

# Onboard Status LEDs
light:
  - platform: status_led
    id: doorman_status_led
    name: Status LED
    pin: ${led_pin}
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: CONFIG

  - platform: esp32_rmt_led_strip
    id: doorman_rgb_status_led
    internal: true
    restore_mode: ALWAYS_OFF
    rgb_order: GRB
    pin: ${rgb_led_pin}
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    gamma_correct: 1
    default_transition_length: 0ms
    effects:
      - pulse:
          name: pulse
          transition_length: 250ms
          update_interval: 250ms
          max_brightness: 60%
      - pulse:
          name: slow_pulse
          transition_length: 1s
          update_interval: 2s
          max_brightness: 60%
      - pulse:
          name: slow_partymode
          transition_length: 4s
          update_interval: 2s
          min_brightness: 0%
          max_brightness: 40%

binary_sensor:   
  # Preconfigured Ring To Open Action (Internal)
  - platform: tcs_intercom
    id: doorman_entrance_doorbell
    lambda: !lambda "return id(entrance_doorbell_command);"
    internal: true
    on_press:
      then:
        - if:
            condition:
              switch.is_on: doorman_ring_to_open
            then:
              - delay: !lambda "return id(ring_to_open_door_opener_delay).state*1000;"
              - tcs_intercom.send:
                  command: !lambda "return id(first_door_opener_command);"

  # Preconfigured Sensors
  - platform: tcs_intercom
    name: "Entrance Doorbell"
    lambda: !lambda "return id(entrance_doorbell_command);"
    on_multi_click:
      # Single press
      - timing:
          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: entrance_single

      # Double press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: entrance_double
              
      # Triple press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: entrance_triple


  - platform: tcs_intercom
    name: "Apartment Doorbell"
    lambda: !lambda "return id(apartment_doorbell_command);"
    on_multi_click:
      # Single press
      - timing:
          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: apartment_single

      # Double press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: apartment_double
              
      # Triple press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: apartment_triple


  - platform: tcs_intercom
    name: "Pick up phone"
    lambda: !lambda "return id(pick_up_phone_command);"
    disabled_by_default: true
    on_multi_click:
      # Single press
      - timing:
          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: phone_pickup_pattern
              event_type: single

      # Double press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: phone_pickup_pattern
              event_type: double
              
      # Triple press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: phone_pickup_pattern
              event_type: triple

  - platform: tcs_intercom
    name: "Hang up phone"
    lambda: !lambda "return id(hang_up_phone_command);"
    disabled_by_default: true

  - platform: gpio
    id: doorman_external_button
    name: External Button
    icon: mdi:gesture-tap
    disabled_by_default: true
    pin:
      number: ${external_button_pin}
      mode:
        pulldown: true
        input: true
      inverted: true

  # Ring To Open - toggle switch automation
  - platform: tcs_intercom
    id: ring_to_open_toggle_command
    internal: true
    lambda: !lambda "return id(ring_to_open_command);"
    on_press:
      - switch.toggle: doorman_ring_to_open

number:
  - platform: template
    name: Ring To Open Delay
    id: ring_to_open_door_opener_delay
    mode: slider
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    restore_value: true
    initial_value: 0
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:clock-end"

text:
  - platform: template
    name: Open Entrance Door Command
    optimistic: true
    mode: text
    initial_value: '00001100'
    on_value:
      then:
        - lambda: |-
            id(first_door_opener_command) = std::stoi(x.c_str(), nullptr, 16);
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    name: Open Second Door Command
    optimistic: true
    mode: text
    initial_value: '00001100'
    on_value:
      then:
        - lambda: |-
            id(second_door_opener_command) = std::stoi(x.c_str(), nullptr, 16);
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    name: Entrance Doorbell Command
    optimistic: true
    mode: text
    initial_value: '00000000'
    on_value:
      then:
        - lambda: |-
            id(entrance_doorbell_command) = std::stoi(x.c_str(), nullptr, 16);
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    name: Apartment Doorbell Command
    optimistic: true
    mode: text
    initial_value: '00000000'
    on_value:
      then:
        - lambda: |-
            id(apartment_doorbell_command) = std::stoi(x.c_str(), nullptr, 16);
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    name: Pick up phone Command
    optimistic: true
    mode: text
    initial_value: '00000000'
    on_value:
      then:
        - lambda: |-
            id(pick_up_phone_command) = std::stoi(x.c_str(), nullptr, 16);
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    name: Hang up phone Command
    optimistic: true
    mode: text
    initial_value: '00003000'
    on_value:
      then:
        - lambda: |-
            id(hang_up_phone_command) = std::stoi(x.c_str(), nullptr, 16);
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    name: Toggle Ring To Open Command
    optimistic: true
    mode: text
    initial_value: '00000000'
    on_value:
      then:
        - lambda: |-
            id(ring_to_open_command) = std::stoi(x.c_str(), nullptr, 16);
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

event:
  - platform: template
    id: doorbell_pattern
    name: "Doorbell Pattern"
    device_class: DOORBELL
    event_types:
      - "apartment_single"
      - "apartment_double"
      - "apartment_triple"
      - "entrance_single"
      - "entrance_double"
      - "entrance_triple"

  - platform: template
    id: phone_pickup_pattern
    name: "Phone pickup Pattern"
    event_types:
      - "single"
      - "double"
      - "triple"

script:
  - id: reset_led
    then:
      # TODO: Restore specific state conditionally
      - light.turn_off: doorman_rgb_status_led