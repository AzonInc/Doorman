# Configurable Options
substitutions:
  name: "doorman-s3"
  friendly_name: "Doorman S3"
  log_level: "INFO"

  # Hardware Configuration
  led_pin: "GPIO1"
  rgb_led_pin: "GPIO2"
  relay_pin: "GPIO42"
  external_button_pin: "GPIO41"

globals:
  - id: first_door_opener_command
    type: int
    restore_value: true
    initial_value: '0x1100'

  - id: second_door_opener_command
    type: int
    restore_value: true
    initial_value: '0x1100'

  - id: apartment_doorbell_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

  - id: entrance_doorbell_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

  - id: pick_up_phone_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

  - id: hang_up_phone_command
    type: int
    restore_value: true
    initial_value: '0x3000'

  - id: function_button_command
    type: int
    restore_value: true
    initial_value: '0x00000000'

  - id: turn_on_light_command
    type: int
    restore_value: true
    initial_value: '0x1200'

# Board Setup
esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf

# Essential ESPHome Configuration Options
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  
  min_version: "2024.8.0"

  project:
    name: "AzonInc.Doorman"
    version: "2024.8.5"

  platformio_options:
    board_build.flash_mode: dio

  on_boot:
    then:
      - light.turn_on:
          id: doorman_rgb_status_led
          effect: pulse
          red: 100%
          green: 65%
          blue: 0%
      - wait_until:
          condition:
            wifi.connected:
      - light.turn_on:
          id: doorman_rgb_status_led
          effect: slow_pulse
          red: 0%
          green: 22%
          blue: 100%
      - wait_until:
          condition:
            api.connected:
      - light.turn_on:
          id: doorman_rgb_status_led
          effect: none
          red: 0%
          green: 22%
          blue: 100%
          color_brightness: 60%
      - delay: 3s
      - script.execute: update_led

# Enable logging
logger:
  level: ${log_level}

api:
  reboot_timeout: 0s
  services:
    - service: send_tcs_command
      variables:
        command: int
      then:
        - tcs_intercom.send:
            command: !lambda 'return command;'

web_server:
  version: 3

ota:
  - platform: esphome
  - platform: http_request
    id: ota_http_request

http_request:
  verify_ssl: false

wifi:
  ap:
    ssid: "Doorman-S3 Setup"
    password: "open-sesame"

captive_portal:

# Improv for easy provisioning
improv_serial:

# Import TCS Intercom Component
external_components:
  - source: github://AzonInc/esphome_tcs_intercom@master
    components: [ tcs_intercom ]
    refresh: 60s

# Setup TCS Intercom Component
tcs_intercom:
  event: "doorman"
  hardware_version:
    name: "Hardware"
    icon: "mdi:router-wireless"
    disabled_by_default: true
  bus_command:
    id: last_bus_command
    name: "Last Bus Command"


switch:
  # Preconfigured Relay Switch
  - platform: gpio
    name: Relay
    icon: mdi:electric-switch
    id: doorman_relay
    restore_mode: RESTORE_DEFAULT_OFF
    disabled_by_default: true
    pin: ${relay_pin}

button:
  # System Actions
  - platform: restart
    id: doorman_restart
    entity_category: CONFIG
    name: Restart
    icon: mdi:restart
    disabled_by_default: true

  - platform: safe_mode
    id: doorman_safe_mode
    name: Safe mode
    entity_category: CONFIG
    disabled_by_default: true

  - platform: factory_reset
    id: doorman_factory_reset
    name: Restore Factory Settings
    entity_category: CONFIG
    disabled_by_default: true

  # Preconfigured Open Door Button
  - platform: template
    id: open_entrance_door
    name: "Open Entrance Door"
    icon: mdi:door
    on_press:
      - tcs_intercom.send:
          command: !lambda "return id(first_door_opener_command);"

  - platform: template
    id: open_second_door
    name: "Open Second Door"
    icon: mdi:door
    on_press:
      - tcs_intercom.send:
          command: !lambda "return id(second_door_opener_command);"
    disabled_by_default: true

  - platform: template
    id: turn_on_light
    name: "Turn on the light"
    icon: mdi:lightbulb-on
    on_press:
      - tcs_intercom.send:
          command: !lambda "return id(turn_on_light_command);"
    disabled_by_default: true

# Onboard Status LEDs
light:
  - platform: status_led
    id: doorman_status_led
    name: Status LED
    icon: "mdi:led-on"
    pin: ${led_pin}
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: CONFIG

  - platform: esp32_rmt_led_strip
    id: doorman_rgb_status_led
    icon: "mdi:led-on"
    name: RGB Status LED
    internal: true
    restore_mode: ALWAYS_OFF
    rgb_order: GRB
    pin: ${rgb_led_pin}
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    gamma_correct: 1
    default_transition_length: 0ms
    effects:
      - pulse:
          name: pulse
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 0%
          max_brightness: 40%
      - pulse:
          name: slow_pulse
          transition_length: 1s
          update_interval: 2s
          min_brightness: 0%
          max_brightness: 40%
      - pulse:
          name: slow_partymode
          transition_length: 4s
          update_interval: 2s
          min_brightness: 0%
          max_brightness: 40%

sensor:
  - platform: uptime
    name: Uptime
    id: doorman_uptime
    disabled_by_default: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
      ignore_strapping_warning: true
    internal: true
    id: doorman_boot_button

  # Preconfigured Sensors
  - platform: tcs_intercom
    id: entrance_doorbell
    name: "Entrance Doorbell"
    lambda: !lambda "return id(entrance_doorbell_command);"
    auto_off: 0.2s
    on_multi_click:
      # Single press
      - timing:
          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: entrance_single

      # Double press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: entrance_double
              
      # Triple press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: entrance_triple


  - platform: tcs_intercom
    id: apartment_doorbell
    name: "Apartment Doorbell"
    lambda: !lambda "return id(apartment_doorbell_command);"
    auto_off: 0.2s
    on_multi_click:
      # Single press
      - timing:
          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: apartment_single

      # Double press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: apartment_double
              
      # Triple press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: doorbell_pattern
              event_type: apartment_triple


  - platform: tcs_intercom
    id: "pick_up_phone"
    name: "Pick up phone"
    lambda: !lambda "return id(pick_up_phone_command);"
    auto_off: 0.2s
    entity_category: DIAGNOSTIC
    disabled_by_default: true
    on_multi_click:
      # Single press
      - timing:
          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: phone_pick_up_pattern
              event_type: single

      # Double press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: phone_pick_up_pattern
              event_type: double
              
      # Triple press
      - timing:
          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at most 1s

          - ON for at most 0.5s
          - OFF for at least 2s
        then:
          - event.trigger:
              id: phone_pick_up_pattern
              event_type: triple

  - platform: tcs_intercom
    id: "hang_up_phone"
    name: "Hang up phone"
    lambda: !lambda "return id(hang_up_phone_command);"
    auto_off: 0.2s
    entity_category: DIAGNOSTIC
    disabled_by_default: true

  - platform: tcs_intercom
    id: "function_button"
    name: "Function Button"
    auto_off: 0.2s
    lambda: !lambda "return id(function_button_command);"
    entity_category: DIAGNOSTIC
    disabled_by_default: true

  - platform: tcs_intercom
    id: "light_button"
    name: "Light Button"
    lambda: !lambda "return id(turn_on_light_command);"
    auto_off: 0.2s
    entity_category: DIAGNOSTIC
    disabled_by_default: true

  - platform: gpio
    id: doorman_external_button
    name: External Button
    icon: mdi:gesture-tap
    disabled_by_default: true
    pin:
      number: ${external_button_pin}
      mode:
        pullup: true
        input: true
      inverted: true

text:
  - platform: template
    id: open_entrance_door_command_input
    name: "Command: Open Entrance Door"
    mode: text
    lambda: |-
      unsigned long number = id(first_door_opener_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(first_door_opener_command) = number;
            id(open_entrance_door_command_input)->publish_state(str_upper_case(format_hex(number)));
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    id: open_second_door_command_input
    name: "Command: Open Second Door"
    mode: text
    lambda: |-
      unsigned long number = id(second_door_opener_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(second_door_opener_command) = number;
            id(open_second_door_command_input)->publish_state(str_upper_case(format_hex(number)));
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    id: entrance_doorbell_command_input
    name: "Command: Entrance Doorbell"
    mode: text
    lambda: |-
      unsigned long number = id(entrance_doorbell_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(entrance_doorbell_command) = number;
            id(entrance_doorbell_command_input)->publish_state(str_upper_case(format_hex(number)));
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    id: apartment_doorbell_command_input
    name: "Command: Apartment Doorbell"
    mode: text
    lambda: |-
      unsigned long number = id(apartment_doorbell_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(apartment_doorbell_command) = number;
            id(apartment_doorbell_command_input)->publish_state(str_upper_case(format_hex(number)));
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    id: pick_up_phone_command_input
    name: "Command: Pick up phone"
    mode: text
    lambda: |-
      unsigned long number = id(pick_up_phone_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(pick_up_phone_command) = number;
            id(pick_up_phone_command_input)->publish_state(str_upper_case(format_hex(number)));
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    id: hang_up_command_input
    name: "Command: Hang up phone"
    mode: text
    lambda: |-
      unsigned long number = id(hang_up_phone_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(hang_up_phone_command) = number;
            id(hang_up_command_input)->publish_state(str_upper_case(format_hex(number)));
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    id: function_button_command_input
    name: "Command: Function Button"
    mode: text
    lambda: |-
      unsigned long number = id(function_button_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(function_button_command) = number;
            id(function_button_command_input)->publish_state(str_upper_case(format_hex(number)));
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

  - platform: template
    id: turn_on_light_command_input
    name: "Command: Turn on light"
    mode: text
    lambda: |-
      unsigned long number = id(turn_on_light_command);
      return str_upper_case(format_hex(number));
    set_action:
      then:
        - lambda: |-
            x.erase(std::remove_if(x.begin(), x.end(), [](char c) { return !std::isxdigit(c); }), x.end());
            x.erase(0, x.find_first_not_of('0'));
            x.resize(8);
            unsigned long number = 0;
            if(std::string(x.c_str()) != "") {
              number = std::stoul(x.c_str(), nullptr, 16);
            }
            id(turn_on_light_command) = number;
            id(turn_on_light_command_input)->publish_state(str_upper_case(format_hex(number)));
    disabled_by_default: true
    entity_category: CONFIG
    icon: "mdi:console-network"

event:
  - platform: template
    id: doorbell_pattern
    name: "Doorbell Pattern"
    icon: "mdi:doorbell"
    device_class: DOORBELL
    event_types:
      - "apartment_single"
      - "apartment_double"
      - "apartment_triple"
      - "entrance_single"
      - "entrance_double"
      - "entrance_triple"

  - platform: template
    id: phone_pick_up_pattern
    name: "Phone pick up Pattern"
    icon: "mdi:phone-incoming-outgoing"
    event_types:
      - "single"
      - "double"
      - "triple"

script:
  - id: update_led
    then:
      - logger.log: "Conditionally set LED State"
      # TODO: Restore specific state conditionally
      # Extended by addons