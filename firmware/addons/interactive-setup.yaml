# Interactive Command Setup Addon

globals:
  - id: initial_setup_done
    type: bool
    restore_value: yes
    initial_value: "false"

  - id: interactive_setup_step
    type: std::string
    restore_value: no
    initial_value: '""'

esphome:
  on_boot:
    then:
      - delay: 2s
      - if:
          condition:
            # Ignore initial setup if something is already set
            - lambda: |-
                return 
                  id(initial_setup_done) == false && 
                  id(apartment_doorbell_command) == 0 && 
                  id(entrance_doorbell_command) == 0 && 
                  id(pick_up_phone_command) == 0 &&
                  id(function_button_command) == 0;
          then:
            - button.press: doorman_interactive_setup_start
          else:
            - text_sensor.template.publish:
                id: doorman_interactive_setup_status
                state: "Setup Complete"

button:
  - platform: template
    id: doorman_interactive_setup_start
    name: "Interactive Setup: Start"
    icon: mdi:cog-play
    on_press: 
      - script.execute:
          id: interactive_setup_next
          next_step: "first_door_opener_command"
          text: "Press the 'Door Opener (Key)' Button"
          first_step: true
    entity_category: CONFIG

  - platform: template
    id: doorman_interactive_setup_cancel
    name: "Interactive Setup: Cancel"
    icon: mdi:cog-stop
    on_press: 
      - script.execute:
          id: interactive_setup_next
          next_step: "complete"
          text: "Setup complete"
          first_step: false
    entity_category: CONFIG


text_sensor:
  - platform: template
    id: doorman_interactive_setup_status
    name: "Interactive Setup: Status"
    icon: mdi:list-status
    entity_category: DIAGNOSTIC
    update_interval: never
    lambda: return {""};


# Extend TCS Intercom Component
tcs_intercom:
  bus_command:
    on_value:
      # Interactive Setup running
      - if:
          condition:
            - lambda: return id(interactive_setup_step) != "";
          then:
            - lambda: |-
                ESP_LOGI("MAIN", "Setup: Current Step: %s", id(interactive_setup_step).c_str());

            # Step: first_door_opener_command
            - if:
                condition:
                  - lambda: |-
                      std::string str = std::string(x.c_str());
                      if (str.length() > 5)
                      {
                          str.erase(5); // Ingore system commands
                      }
                      return id(interactive_setup_step) == "first_door_opener_command" && str != "00005" && str != "00002" && str != "00003";
                then:
                  # Save Command
                  - lambda: |-
                      unsigned long number = 0;
                      if(std::string(x.c_str()) != "") {
                        number = std::stoul(x.c_str(), nullptr, 16);
                      }
                      id(first_door_opener_command) = number;
                      ESP_LOGI("MAIN", "Setup: Saved Step: %s", id(interactive_setup_step).c_str());
                  # LED State
                  - script.execute:
                      id: interactive_setup_next
                      next_step: "function_button_command"
                      text: "Press the 'Function (Circle)' Button"
                      first_step: false

            # Step: function_button_command
            - if:
                condition:
                  - lambda: |-
                      std::string str = std::string(x.c_str());
                      if (str.length() > 4)
                      {
                          str.erase(4); // Ingore system commands
                      }
                      return id(interactive_setup_step) == "function_button_command" && str != "0000";
                then:
                  # Save Command
                  - lambda: |-
                      unsigned long number = 0;
                      if(std::string(x.c_str()) != "") {
                        number = std::stoul(x.c_str(), nullptr, 16);
                      }
                      id(function_button_command) = number;
                      ESP_LOGI("MAIN", "Setup: Saved Step: %s", id(interactive_setup_step).c_str());
                  # LED State
                  - script.execute:
                      id: interactive_setup_next
                      next_step: "pick_up_phone_command"
                      text: "Pick up the phone"
                      first_step: false

            # Step: pick_up_phone_command
            - if:
                condition:
                  - lambda: |-
                      std::string str = std::string(x.c_str());
                      if (str.length() > 4)
                      {
                          str.erase(4); // Ingore system commands
                      }
                      return id(interactive_setup_step) == "pick_up_phone_command" && str != "0000";
                then:
                  # Save Command
                  - lambda: |-
                      unsigned long number = 0;
                      if(std::string(x.c_str()) != "") {
                        number = std::stoul(x.c_str(), nullptr, 16);
                      }
                      id(pick_up_phone_command) = number;
                      ESP_LOGI("MAIN", "Setup: Saved Step: %s", id(interactive_setup_step).c_str());
                  # LED State
                  - script.execute:
                      id: interactive_setup_next
                      next_step: "apartment_doorbell_command"
                      text: "Press the 'Apartment Doorbell' Button"
                      first_step: false

            # Step: apartment_doorbell_command
            - if:
                condition:
                  - lambda: |-
                      std::string str = std::string(x.c_str());
                      if (str.length() > 4)
                      {
                          str.erase(4); // Ingore system commands
                      }
                      return id(interactive_setup_step) == "apartment_doorbell_command" && str != "0000";
                then:
                  # Save Command
                  - lambda: |-
                      unsigned long number = 0;
                      if(std::string(x.c_str()) != "") {
                        number = std::stoul(x.c_str(), nullptr, 16);
                      }
                      id(apartment_doorbell_command) = number;
                      ESP_LOGI("MAIN", "Setup: Saved Step: %s", id(interactive_setup_step).c_str());
                  # LED State
                  - script.execute:
                      id: interactive_setup_next
                      next_step: "entrance_doorbell_command"
                      text: "Press the 'Entrance Doorbell' Button"
                      first_step: false

             # Step: entrance_doorbell_command
            - if:
                condition:
                  - lambda: |-
                      std::string str = std::string(x.c_str());
                      if (str.length() > 4)
                      {
                          str.erase(4); // Ingore system commands
                      }
                      return id(interactive_setup_step) == "entrance_doorbell_command" && str != "0000";
                then:
                  # Save Command
                  - lambda: |-
                      unsigned long number = 0;
                      if(std::string(x.c_str()) != "") {
                        number = std::stoul(x.c_str(), nullptr, 16);
                      }
                      id(entrance_doorbell_command) = number;
                      ESP_LOGI("MAIN", "Setup: Saved Step: %s", id(interactive_setup_step).c_str());
                  # LED State
                  - script.execute:
                      id: interactive_setup_next
                      next_step: "complete"
                      text: "Setup complete"
                      first_step: false


script:
  - id: interactive_setup_next
    parameters:
      next_step: string
      text: string
      first_step: bool
    then:
      - if:
          condition:
            - lambda: "return first_step == false;"
          then:
            # Temporary break
            - globals.set:
                id: interactive_setup_step
                value: '""'
            - text_sensor.template.publish:
                id: doorman_interactive_setup_status
                state: "Saving command..."
            # LED State: Saved
            - light.turn_on:
                id: doorman_rgb_status_led
                red: 0%
                green: 100%
                blue: 10%
                effect: none
            - delay: 3s

      - text_sensor.template.publish:
          id: doorman_interactive_setup_status
          state: !lambda "return text.c_str();"

      - if:
          condition:
            - lambda: "return next_step != \"complete\";"
          then:
            # Next step
            - globals.set:
                id: interactive_setup_step
                value: !lambda "return next_step;"
            # LED State: Waiting
            - light.turn_on:
                id: doorman_rgb_status_led
                red: 0%
                green: 100%
                blue: 10%
                effect: pulse
          else:
            # Initial setup done
            - globals.set:
                id: initial_setup_done
                value: 'true'
            # Reset step
            - globals.set:
                id: interactive_setup_step
                value: '""'
            - script.execute: update_led
            - logger.log: "Interactive Setup complete!"